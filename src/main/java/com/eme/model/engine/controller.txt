package com.eme.controller;

import com.eme.controller.exceptions.ExceptionWrapper;
import com.eme.controller.validation.ObjectValidation;
import com.eme.model.entity.Attachment;
import com.eme.model.entity.&ENTITY&;
import com.eme.model.entity.enums.Status;
import com.eme.model.entity.enums.Role;
import com.eme.model.entity.enums.TransactionStatus;
import com.eme.model.service.&ENTITY&Service;
import jakarta.enterprise.context.RequestScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;

import java.util.HashMap;
import java.util.Map;

@RequestScoped
@Named
public class &ENTITY&Controller {

    @Inject
    private &ENTITY& &ENTITY_NAME&;

    @Inject
    private &ENTITY&Service &ENTITY_NAME&Service;

    @Inject
    private ObjectValidation objectValidation;

    @Inject
    private ExceptionWrapper exceptionWrapper;

    private Map<TransactionStatus, Object> result;
    private Map<String, String> errors;

    //-------INSERT------------------------------------------------------
    public Map<TransactionStatus, Object> save(
            &Fields_With_Comma_Save&
    ){
        result.clear();
        errors.clear();

        //  ---------CREATE-OBJECT-----------------
        &ENTITY_NAME& = &ENTITY&.builder()
        &Fields_With_Dots_Save&
        .build();

        //  ---------VALIDATING-DATA---------------
        errors = objectValidation.doValidation(&ENTITY_NAME&);
        try {
            if(errors.isEmpty()){
                result.put(TransactionStatus.Done, &ENTITY_NAME&Service.save(&ENTITY_NAME&));
            }else{
                result.put(TransactionStatus.Error, errors);
            }
        }catch(Exception e){
            result.put(TransactionStatus.Exception, exceptionWrapper.getMessage(e));
        }return result;
    }

    //-------UPDATE------------------------------------------------------
    public Map<TransactionStatus, Object> edit(
            &Fields_With_Comma_Edit&
    ){
        result.clear();
        errors.clear();

        //  ---------CREATE-OBJECT-----------------
        &ENTITY_NAME& = &ENTITY&.builder()
                &Fields_With_Dots_Edit&
                .build();

        //  ---------VALIDATING-DATA---------------
        errors = objectValidation.doValidation(&ENTITY_NAME&);
        try {
            if(errors.isEmpty()){
                result.put(TransactionStatus.Done, &ENTITY_NAME&Service.save(&ENTITY_NAME&));
            }else{
                result.put(TransactionStatus.Error, errors);
            }
        }catch(Exception e){
            result.put(TransactionStatus.Exception, exceptionWrapper.getMessage(e));
        }return result;
    }

    //-------PHYSICAL-REMOVE---------------------------------------------
    public Map<TransactionStatus, Object> physicalRemove(Long id){
        result.clear();
        try {
            result.put(TransactionStatus.Done, &ENTITY_NAME&Service.physicalRemove(id));
        }catch(Exception e){
            result.put(TransactionStatus.Exception, exceptionWrapper.getMessage(e));
        }return result;
    }

    //-------LOGICAL-REMOVE----------------------------------------------
    public Map<TransactionStatus, Object> logicalRemove(Long id){
        result.clear();
        try {
            result.put(TransactionStatus.Done, &ENTITY_NAME&Service.physicalRemove(id));
        }catch(Exception e){
            result.put(TransactionStatus.Exception, exceptionWrapper.getMessage(e));
        }return result;
    }
    
    //------SELECT-ALL---------------------------------------------------
    public Map<TransactionStatus, Object> findAll(){
        result.clear();
        try {
            result.put(TransactionStatus.Done, &ENTITY_NAME&Service.findAll());
        }catch(Exception e){
            result.put(TransactionStatus.Exception, exceptionWrapper.getMessage(e));
        }return result;
    }
    
    //------SELECT-BY-ID-------------------------------------------------
    public Map<TransactionStatus, Object> findById(Long id){
        result.clear();
        try {
            result.put(TransactionStatus.Done, &ENTITY_NAME&Service.findById(id));
        }catch(Exception e){
            result.put(TransactionStatus.Exception, exceptionWrapper.getMessage(e));
        }return result;
    }

}